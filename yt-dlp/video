#!/usr/bin/env zx
"use strict"

import "zx/globals"
import os from "os"

const exit = process.exit

/** Argument parsed by the minimist plugin.
 * @type {{
 * _: string[]
 * section: string
 * cookies: string
 * browser: string
 * c: string
 * resolution: string|number
 * r: string|number
 * sponsorblock: boolean
 * help: boolean
 * debug: boolean
 * h: boolean
 * }} */
const argv = minimist(process.argv.slice(3), {
    alias: {
        help: ["h"],
        r: ["resolution"],
    },
    boolean: ["help", "sponsorblock", "debug"],
})

if (typeof argv.sponsorblock === "undefined") argv.sponsorblock = true

if (argv.debug) console.log(argv)

if (argv.help) {
    console.log("No help for you man")
    exit(0)
}

const outputTemplate = `${os.homedir()}/Downloads/Video/%(title)s-%(id)s.%(ext)s`

let format
if (!argv.resolution) {
    format = "bv[height<=1080]+ba/b[height<=1080]"
} else if (typeof argv.resolution === "number") {
    format = `bv[height<=${argv.resolution}]+ba/b[height<=${argv.resolution}]`
} else {
    format = "bv+ba/b"
}

const ytDlpArgs = [
    "--format",
    format,
    "--output",
    outputTemplate,
    "--add-metadata",
    "--embed-chapters",
    "--list-formats",
    "--no-simulate",
    "--color=always",
]

if (argv.sponsorblock) ytDlpArgs.push("--sponsorblock-remove", "all")
if (argv.section) ytDlpArgs.push("--download-sections", argv.section)
if (argv.cookies) ytDlpArgs.push("--cookies", argv.cookies)
if (argv.browser) ytDlpArgs.push("--cookies-from-browser", argv.browser)

let url = argv.url ?? argv._[0]
if (!url) {
    console.log(chalk.red("Please provide a url or search term"))
    exit(0)
}

try {
    url = new URL(url)
} catch (err) {
    url = `ytsearch:${url}`
}

await $`yt-dlp ${ytDlpArgs} ${url}`.verbose(true)
